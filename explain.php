
<!--begin include explain.php-->

<a name="readMe"></a>

<div id="instructExplain" class="boxData">

	<div class="pageHeader">
		Instructions for using CRL's implementation of the OCLCapi system
		<br/>
		to input OCLC numbers and get holding libraries information:

		<span id="showHideInstructions" class="actionButton toggler">[toggle&nbsp;&nbsp;instructions]</span>
		<script language="javascript" type="text/javascript">
			$(document).ready(function(){
				$("#showHideInstructions").click(function(){
					$("#inputNotes").toggle();
			});//end click func for showHideInstructions
		});//end doc.ready function

		</script>
	</div>

	<div id="inputNotes" style="display:none">

		<?php
			echo getOCLCoptions(); //show datasource + various options submitted to OCLC API (in appConfigOCLCapi.php)
		?>

		<ul>
			<li>
				<a href="index.php?action=queryAPI&datasource=text" target="_blank" class="highlightProcessing" style="font-weight:bold;">Text input:</a>
				Paste your list of OCLC numbers into the box, 'Check OCLC holdings' button...
			</li>
			<ul><li>...wait for the page to finish loading, go to bottom of page and save the data.</li></ul>
			<li>
				<a href="index.php?action=queryAPI&datasource=fileupload" target="_blank" class="highlightProcessing" style="font-weight:bold;">File input:</a>
				'Browse' to 'Choose a file', 'Upload File' button. Proceed as above.
			</li>
			<li>
				<a href="index.php?action=queryAPI&datasource=database" target="_blank" class="highlightProcessing" style="font-weight:bold;">Database input:</a>
				Source code in <a href="http://<?php echo $_SERVER['SERVER_ADDR'] ?>/index.php?action=queryAPI&datasource=database" target="_blank">queryAPIfromDB.php</a> must point to the correct target table.  configure the page, load it, proceed as above.
			</li>

			<li>
				<strong>How it works:</strong>
				<ol>
					<li>PHP page pulls OCLC #s
							(<?php echo getDatasource() ?>), adds each OCLC # to an array.</li>
					<li>PHP function insertAPItargetDiv writes an HTML div into the page for each OCLC #.</li>
					<li>For each OCLC #, PHP function getJSONfromOCLC generates a background request to WorldCat Search Application Programming Interface (API),
						using <a href="http://en.wikipedia.org/wiki/CURL" target="_blank">cURL</a>.</li>
					<li>The API returns OCLC holdings data for each item (based on the OCLC number), in <a href="http://en.wikipedia.org/wiki/JSON" target="_blank">JavaScript Object Notation (JSON)</a> format.</li>
					<li>PHP saves the relevant parts of the JSON object into a version for the client,
							and writes a JavaScript block into the output, which calls JavaScript function libraryLocationHandler( JSON_object ).
							<ul>
								<li>
									OCLC returns a maximum of 100 holdings libraries per request (this is the limit in each JSON object).
									If 100 are returned in the first object, PHP continues requesting until getting a JSON object with less than 100 holders: this indicates all have been received.
								</li>
							</ul>
					</li>
					<li>Once all holders have been received and PHP has set up the JSON, processing moves to the client.</li>
					<li>
						libraryLocationHandler puts the parts of the JSON object into variables, pulling out the ISSN, list of holding institutions, OCLC #, and title.
						It uses <a href="http://en.wikipedia.org/wiki/JQuery" target="_blank">jQuery</a> to fill the HTML divs generated by PHP's insertAPItargetDiv.
						<ul>
							<li>As the page loads, you will see it change as it displays the API data returned for each successful request.</li>
							<li>After the page loads, any records with no holdings data (just the default message) suffer from errors, most often malformed OCLC numbers: these numbers, and some error information, are saved with the good data.</li>
							<li>OCLC may return data for a new number that has superseded the one submitted; these are shown at the bottom of the page,
								and the original number is saved in the field OCLC_NUMBER, the new one in field OCLCalternate.</li>
						</ul>
					</li>
					<li>
						libraryLocationHandler creates form inputs holdings the API data, and uses jQuery to append these to an HTML form.<br/>
						This can then be submitted to the server, where PHP breaks it into fields separated by the pipe ('<strong>|</strong>') character, creates a .csv file, and mails it as an attachment to the address specified.
					</li>
					<li>
							As of Nov. 2012, the most widely-held item we've run is O# 1564931, Consumer reports, with 4224 holders.
							Some 986 tested titles are unique (1 holder, usually LHL, 8 others).
					</li>
				</ol>

			</li>
			<li>
				For any input source, once results are returned, you will be able to <strong>save them to a .csv file</strong> on the server, (.xls is supported but needs to be turned on)
				and get it as an <strong>email attachment</strong>.
			</li>
			<li>
				The structure of the saved file matches the structure of the main table in the database, so the data can be appended to the main table or saved to a new one.
				The data structure has fields for OCLC #, alternate OCLC #, title, number of holders, and data on holding libraries (a field with library names and codes, and 1 with just the codes).
			</li>
		</ul>
	</div><!--#inputNotes-->

</div><!--#instructExplain-->

<!--end include explain.php-->


